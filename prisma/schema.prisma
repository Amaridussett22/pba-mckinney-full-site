// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  memberships Membership[]
  bookings    Booking[]
  reviews     Review[]
  
  @@map("users")
}

model Instructor {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  bio         String?
  image       String?
  specialties String[]
  experience  Int?     // years of experience
  certifications String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  classes     Class[]
  
  @@map("instructors")
}

model Program {
  id          String   @id @default(cuid())
  name        String
  description String
  ageGroup    String   // "Kids", "Teens", "Adults", "All Ages"
  duration    Int      // duration in minutes
  price       Float
  image       String?
  benefits    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  classes     Class[]
  memberships Membership[]
  
  @@map("programs")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime
  capacity    Int      @default(20)
  location    String
  recurring   Boolean  @default(false)
  recurrencePattern String? // "weekly", "daily", etc.
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  programId    String
  program      Program    @relation(fields: [programId], references: [id])
  instructorId String
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  bookings     Booking[]
  
  @@map("classes")
}

model Membership {
  id        String   @id @default(cuid())
  type      String   // "Monthly", "Annual", "Drop-in"
  status    String   @default("active") // "active", "inactive", "cancelled"
  startDate DateTime
  endDate   DateTime?
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  programId String
  program   Program @relation(fields: [programId], references: [id])
  
  @@map("memberships")
}

model Booking {
  id        String   @id @default(cuid())
  status    String   @default("confirmed") // "confirmed", "cancelled", "completed"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId  String
  user    User  @relation(fields: [userId], references: [id])
  classId String
  class   Class @relation(fields: [classId], references: [id])
  
  @@unique([userId, classId])
  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id])
  
  @@map("reviews")
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  startDate   DateTime
  endDate     DateTime?
  location    String?
  image       String?
  price       Float?
  capacity    Int?
  eventType   String   // "tournament", "seminar", "camp", "party"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("events")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  content   String
  excerpt   String?
  image     String?
  published Boolean  @default(false)
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("blog_posts")
}
